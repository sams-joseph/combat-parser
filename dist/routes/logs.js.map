{"version":3,"sources":["../../server/routes/logs.js"],"names":["router","Router","get","req","res","find","then","status","json","logs","post","files","success","data","combatLog","mv","name","err","fileName","raw","healing","damage","damageTaken","deaths","playerName","createInterface","input","createReadStream","encoding","terminal","on","push","line","includes","unlink","error","create","damageCasters","healingCasters","log","catch","errors","findOne","_id","params","id","query","unit","logFile"],"mappings":"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","file":"logs.js","sourcesContent":["import express from \"express\";\nimport fs from \"fs\";\nimport readline from \"readline\";\nimport Log from \"../models/logs\";\n\nimport {\n  parseHealing,\n  parseDamage,\n  parseAll,\n  getTarget,\n  getPlayerName,\n  parseDeaths,\n  filterByTarget,\n  filterByCaster,\n  getAllCasters\n} from \"../utils/parseLogs\";\n\nconst router = express.Router();\n\nrouter.get(\"/\", (req, res) => {\n  Log.find({}).then(logs => res.status(200).json({ logs }));\n});\n\nrouter.post(\"/\", (req, res) => {\n  if (!req.files)\n    return res\n      .status(400)\n      .json({ success: false, data: \"No files were uploaded\" });\n\n  const combatLog = req.files.combatLog;\n\n  combatLog.mv(`./public/uploads/logs/${combatLog.name}.txt`, err => {\n    if (err) return res.status(500).json({ success: false, data: err });\n\n    const fileName = combatLog.name;\n    const raw = [];\n    const healing = [];\n    const damage = [];\n    const damageTaken = [];\n    const deaths = [];\n    const playerName = getPlayerName(fileName);\n\n    readline\n      .createInterface({\n        input: fs.createReadStream(`./public/uploads/logs/${fileName}.txt`, {\n          encoding: \"ucs2\"\n        }),\n        terminal: false\n      })\n      .on(\"line\", line => {\n        raw.push(parseAll(line, playerName));\n        if (line.includes(\"heals\")) {\n          healing.push(parseHealing(line, playerName));\n        } else if (line.includes(\"hits\")) {\n          damage.push(parseDamage(line, playerName));\n          if (getTarget(\"hits\", line, playerName).name === playerName)\n            damageTaken.push(parseDamage(line, playerName));\n        } else if (line.includes(\"You are dead\")) {\n          deaths.push(parseDeaths(line, playerName));\n        }\n      })\n      .on(\"close\", () => {\n        fs.unlink(`./public/uploads/logs/${fileName}.txt`, error => {\n          if (error) {\n            throw error;\n          }\n        });\n\n        Log.create({\n          name: fileName,\n          raw,\n          healing,\n          damage,\n          damageTaken,\n          deaths,\n          damageCasters: getAllCasters(damage),\n          healingCasters: getAllCasters(healing)\n        })\n          .then(log => res.status(200).json({ log }))\n          .catch(error => res.status(400).json({ errors: error.errors }));\n      });\n  });\n});\n\nrouter.get(\"/:id\", (req, res) => {\n  Log.findOne({ _id: req.params.id })\n    .then(log => res.status(200).json({ log }))\n    .catch(err => res.status(400).json({ errors: err }));\n});\n\nrouter.get(\"/filter/:id\", (req, res) => {\n  if (!req.query.unit)\n    return res.status(400).json({\n      success: false,\n      data: \"This route requires a query string to be passed in the URL\"\n    });\n  Log.findOne({ _id: req.params.id })\n    .then(log => {\n      const unit = req.query.unit;\n      const logFile = log;\n      logFile.healing = filterByCaster(log.healing, unit);\n      logFile.damage = filterByCaster(log.damage, unit);\n      logFile.damageTaken = filterByTarget(log.damageTaken, unit);\n      logFile.deaths = log.deaths;\n      logFile.raw = log.raw;\n\n      return res.status(200).json({ log: logFile });\n    })\n    .catch(err => res.status(400).json({ errors: err }));\n});\n\nexport default router;\n"]}